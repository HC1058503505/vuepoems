<template>
    <repeat for="{{poems}}" key="index" index="index" item="poem">
        <tagPoemCell :poemData.sync="poem"></tagPoemCell>
    </repeat>
</template>

<script>
import wepy from 'wepy'
import WXParse from '../wxParse/wxParse.js'
import Request from '../request/request.js'
import TagPoemCellCom from '../components/tap_poem_cell'
export default class TagPoems extends wepy.page{
    config = {
      enablePullDownRefresh: true
    }

    components = {
        tagPoemCell: TagPoemCellCom
    }
    data = {
        poems: [],
        total_page: 1,
        params: Object,
        page_num: 1,
    }

    methods = {
        
    }

    loadMore() {
        wepy.showNavigationBarLoading();
        let that = this
        let postData = {token: 'gswapi', page: this.page_num}
        let path = '/api/shiwen/Default.aspx'

        if (this.params.type === 'tag' || this.params.type === 'poemalbum') {
            postData['id'] = ''
            postData['pwd'] = ''
            postData['tstr'] = this.params.tagstr
        } else if (this.params.type === 'poetry') {
            postData['astr'] = this.params.tagstr
        } else if (this.params.type == 'dynasty') {
            postData['id'] = ''
            postData['pwd'] = ''
            postData['cstr'] = this.params.tagstr
        } 
        

        
        Request({
            url: path,
            method: 'post',
            data: postData,
            header: {
                'content-type': 'application/x-www-form-urlencoded',
            },
            success: (res) => {
                that.page_num = that.page_num + 1

                let gushiwens = []
                if (res.data.hasOwnProperty('gushiwens')) {
                    gushiwens = res.data.gushiwens
                } else if (res.data.hasOwnProperty('tb_gushiwens')) {
                    gushiwens = res.data.tb_gushiwens
                }

                gushiwens.forEach(element => {
                    let elementCont = element.cont
                    let contentNodes = WXParse.wxParse('contnodes', 'html', elementCont, that).contnodes

                    let nodeIndex = 0
                    while (contentNodes.hasOwnProperty('nodes')) {
                        let nodeElement = contentNodes.nodes[nodeIndex]

                        if (nodeElement.node === "text") {
                            element.firstSentence = nodeElement.text
                            break
                        } else if (nodeElement.hasOwnProperty('nodes')) {
                            contentNodes = nodeElement
                            nodeIndex = 0
                            continue
                        } 
                        
                        nodeIndex = nodeIndex + 1
                    }
                });
                
                that.poems = that.poems.concat(gushiwens)
                that.total_page = res.data.sumPage
                that.$apply()
            },
            fail: (error) => {
                wepy.showToast({
                  title: '加载失败', //提示的内容,
                  icon: 'error', //图标,
                  duration: 1000, //延迟时间,
                  mask: true, //显示透明蒙层，防止触摸穿透,
                  success: res => {}
                });
                
            },
            complete: () => {
                wepy.hideNavigationBarLoading();
                wepy.stopPullDownRefresh();
                // 短暂震动
                wx.vibrateShort()
            }
        })
    }
    onLoad(params) {
        if (!params) {
            return
        }
        this.params = params
        
        let titleType = '标签.'
        if (params.type === 'poetry') {
            titleType = '诗人.'
        } else if (params.type === 'poemalbum') {
            titleType = '诗集.'
        } else if (params.type === 'dynasty') {
            titleType = '朝代.'
        }
        wepy.setNavigationBarTitle({ title: titleType + params.tagstr });
        this.loadMore()
    }

    onPullDownRefresh() {
        this.page_num = 1
        this.loadMore()
    }

    onReachBottom() {
        if (this.page_num <= this.total_page) {
            this.loadMore()
            return
        }

        wepy.showToast({
            title: '没有更多数据', //提示的内容,
            icon: 'none', //图标,
            duration: 2000, //延迟时间,
            mask: true, //显示透明蒙层，防止触摸穿透,
            success: res => {}
        });
    }
}
</script>


<style lang="less" scoped>

</style>
